List<String> listStr = list.stream()
							.filter(cust -> cust.getCity().startsWith("Ma"))
							.map(cust -> cust.getName())
							.sorted() //Why don't compare here
							.collect(Collectors.toList())

When you call sorted() without providing a Comparator, it sorts the elements according to their natural ordering. In the case of String, the natural ordering is lexicographic, which means it sorts the strings alphabetically.

So, if you're sorting a List<String> of names, calling sorted() without a Comparator will sort them alphabetically by default. If you want a different ordering, such as sorting by the length of the names or in reverse order, you would need to specify a custom Comparator in the sorted() method.

List<String> listStr = list.stream()
							.filter(cust -> cust.getCity().startsWith("Ma"))
							.map(cust->cust.getName())
							.sorted(Comparator.comparing(String::length))
							.collect(Collectors.toList())

public static final BiFunction<List<Customer>,String,List<String>> NAMES_IN_CITY
=(list, searchStr)
    -> list.stream()
            .filter(cust -> cust.getCity().startsWith(searchStr))
            .map(cust -> cust.getName())
            .sorted()
            .collect(Collectors.toList());


List<String> listStr = LambdaLibrary.Names_IN_CITY.apply(list,"Ma");
